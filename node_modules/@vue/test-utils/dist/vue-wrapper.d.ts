import { ComponentPublicInstance, nextTick, App } from 'vue';
import { DOMWrapper } from './dom-wrapper';
import { FindAllComponentsSelector, FindComponentSelector } from './types';
import { TriggerOptions } from './create-dom-event';
export declare class VueWrapper<T extends ComponentPublicInstance> {
    private componentVM;
    private rootVM;
    private __app;
    private __setProps;
    constructor(app: App | null, vm: ComponentPublicInstance, setProps?: (props: Record<string, any>) => void);
    private get hasMultipleRoots();
    private get parentElement();
    get element(): Element;
    get vm(): T;
    props(selector?: string): any;
    classes(className?: string): boolean | string[];
    attributes(key?: string): any;
    exists(): boolean;
    emitted(): Record<string, unknown[]>;
    html(): string;
    text(): string;
    find<K extends keyof HTMLElementTagNameMap>(selector: K): DOMWrapper<HTMLElementTagNameMap[K]>;
    find<K extends keyof SVGElementTagNameMap>(selector: K): DOMWrapper<SVGElementTagNameMap[K]>;
    find<T extends Element>(selector: string): DOMWrapper<T>;
    get<K extends keyof HTMLElementTagNameMap>(selector: K): DOMWrapper<HTMLElementTagNameMap[K]>;
    get<K extends keyof SVGElementTagNameMap>(selector: K): DOMWrapper<SVGElementTagNameMap[K]>;
    get<T extends Element>(selector: string): DOMWrapper<T>;
    findComponent<T extends ComponentPublicInstance>(selector: new () => T): VueWrapper<T>;
    findComponent<T extends ComponentPublicInstance>(selector: FindComponentSelector): VueWrapper<T>;
    getComponent<T extends ComponentPublicInstance>(selector: new () => T): VueWrapper<T>;
    getComponent<T extends ComponentPublicInstance>(selector: FindComponentSelector): VueWrapper<T>;
    findAllComponents(selector: FindAllComponentsSelector): VueWrapper<T>[];
    findAll<K extends keyof HTMLElementTagNameMap>(selector: K): DOMWrapper<HTMLElementTagNameMap[K]>[];
    findAll<K extends keyof SVGElementTagNameMap>(selector: K): DOMWrapper<SVGElementTagNameMap[K]>[];
    findAll<T extends Element>(selector: string): DOMWrapper<T>[];
    setProps(props: Record<string, any>): Promise<void>;
    trigger(eventString: string, options?: TriggerOptions): Promise<typeof nextTick>;
    unmount(): void;
}
export declare function createWrapper<T extends ComponentPublicInstance>(app: App | null, vm: ComponentPublicInstance, setProps?: (props: Record<string, any>) => void): VueWrapper<T>;
